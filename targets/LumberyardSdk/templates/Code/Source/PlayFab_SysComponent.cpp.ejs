
#include "StdAfx.h"

#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/Serialization/EditContext.h>

#include "PlayFab<%- gemName %>_<%- api.name %>SysComponent.h"

#include "PlayFabSettings.h"
#include "PlayFab<%- api.name %>Api.h"
#include "PlayFab<%- gemName %>Sdk/PlayFab<%- gemName %>_<%- api.name %>NotificationBus.h" // #THIRD_KIND_PLAYFAB_NOTIFICATION_BUS: dbowen (2017/08/11)

namespace PlayFab<%- gemName %>Sdk
{
    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::Reflect(AZ::ReflectContext* context)
    {
        if (AZ::SerializeContext* serialize = azrtti_cast<AZ::SerializeContext*>(context))
        {
            serialize->Class<PlayFab<%- gemName %>_<%- api.name %>SysComponent, AZ::Component>()
                ->Version(0)
                ->SerializerForEmptyClass();

            if (AZ::EditContext* ec = serialize->GetEditContext())
            {
                ec->Class<PlayFab<%- gemName %>_<%- api.name %>SysComponent>("PlayFab<%- gemName %>_<%- api.name %>", "Provides access to the <%- api.name %> API within the PlayFab <%- gemName %> SDK")
                    ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                    // ->Attribute(AZ::Edit::Attributes::Category, "") Set a category
                    ->Attribute(AZ::Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("System"))
                    ->Attribute(AZ::Edit::Attributes::AutoExpand, true)
                    ;
            }
        }
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided)
    {
        provided.push_back(AZ_CRC("PlayFab<%- gemName %>_<%- api.name %>Service"));
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible)
    {
        incompatible.push_back(AZ_CRC("PlayFab<%- gemName %>_<%- api.name %>Service"));
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required)
    {
        required.push_back(AZ_CRC("PlayFab<%- gemName %>_SettingsService"));
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::GetDependentServices(AZ::ComponentDescriptor::DependencyArrayType& dependent)
    {
        (void)dependent;
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::Init()
    {
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::Activate()
    {<% if (api.name === "Client" || api.name == "Server") { // HACK UNTIL REQUEST MANAGER INIT IS DONE CORRECTLY %>
        // #THIRD_KIND_PLAYFAB_SHUTDOWN_FIXES: - Changed statics to pointers, so they can be deleted before the system allocator is destroyed.
        // Start the http request manager thread
        PlayFabRequestManager::playFabHttp = new PlayFabRequestManager();
<% } %>
        PlayFab<%- gemName %>_<%- api.name %>RequestBus::Handler::BusConnect();
        PlayFab<%- gemName %>_<%- api.name %>SimpleRequestBus::Handler::BusConnect(); // #THIRD_KIND_PLAYFAB_BEHAVIOR_CONTEXT: dbowen (2017/08/11)
        AZ::TickBus::Handler::BusConnect();
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::Deactivate()
    {
        PlayFab<%- gemName %>_<%- api.name %>RequestBus::Handler::BusDisconnect();
        PlayFab<%- gemName %>_<%- api.name %>SimpleRequestBus::Handler::BusDisconnect(); // #THIRD_KIND_PLAYFAB_BEHAVIOR_CONTEXT: dbowen (2017/08/11)<% 
if (hasClientOptions) { 
%>

        // #THIRD_KIND_PLAYFAB_SHUTDOWN_FIXES: - Changed statics to pointers, so they can be deleted before the system allocator is destroyed.
        // Log out and clear the auth token
        PlayFabClientApi::ForgetClientCredentials();<% 
} %><% if (api.name === "Client" || api.name == "Server") { // HACK UNTIL REQUEST MANAGER INIT IS DONE CORRECTLY %>

        // Shut down the http handler thread
        SAFE_DELETE(PlayFabRequestManager::playFabHttp);<% 
} %>
    }

    void PlayFab<%- gemName %>_<%- api.name %>SysComponent::OnTick(float deltaTime, AZ::ScriptTimePoint time)
    {
        PlayFab<%- gemName %>_<%- api.name %>NotificationBus::ExecuteQueuedEvents();
        PlayFab<%- gemName %>_<%- api.name %>GlobalNotificationBus::ExecuteQueuedEvents();
    }

    int PlayFab<%- gemName %>_<%- api.name %>SysComponent::GetPendingCalls()
    {
        return PlayFabRequestManager::playFabHttp->GetPendingCalls();
    }
<% if (hasClientOptions) { %>
    // Client-Specific
    bool PlayFab<%- gemName %>_<%- api.name %>SysComponent::IsClientLoggedIn()
    {
        return PlayFabClientApi::IsClientLoggedIn();
    }
<% } %>
    // ------------ Generated API call wrappers
<% for(var i in api.calls) { var apiCall = api.calls[i];
%><% if(HasRequest(apiCall, api)) {
%>    int PlayFab<%- gemName %>_<%- api.name %>SysComponent::<%- apiCall.name %>(<%- api.name %>Models::<%- apiCall.request %>& request, ProcessApiCallback<<%- api.name %>Models::<%- apiCall.result %>> callback, ErrorCallback errorCallback, void* customData)
    {
        return PlayFab<%- api.name %>Api::<%- apiCall.name %>(request, callback, errorCallback, customData);
    }
<% } else {
%>    int PlayFab<%- gemName %>_<%- api.name %>SysComponent::<%- apiCall.name %>(ProcessApiCallback<<%- api.name %>Models::<%- apiCall.result %>> callback, ErrorCallback errorCallback, void* customData)
    {
        return PlayFab<%- api.name %>Api::<%- apiCall.name %>(callback, errorCallback, customData);
    }
<% } } 

%>
    // #THIRD_KIND_PLAYFAB_BEHAVIOR_CONTEXT: dbowen (2017/08/11) - The request bus now has explicit functions which take a request parameter
    // onlt and do not allow callbacks to be passed in. This is for code which expects to receive the callback on the notification bus.
    // NOTE that Lua cannot use optional parameters on the bus, hence the need for an explicit version which does not accept callbacks
    // The versions above, which are identical in defintion but with optional parameters cannot be used.
<%

for(var i in api.calls) { var apiCall = api.calls[i];
%><% if(HasRequest(apiCall, api)) {
%>    int PlayFab<%- gemName %>_<%- api.name %>SysComponent::<%- apiCall.name %>(<%- api.name %>Models::<%- apiCall.request %>& request)
    {
        return <%- apiCall.name %>(request, nullptr, nullptr, nullptr);
    }
<% } else {
%>    int PlayFab<%- gemName %>_<%- api.name %>SysComponent::<%- apiCall.name %>()
    {
        return <%- apiCall.name %>(nullptr, nullptr, nullptr);
    }
    
<% } } %>
    // THIRD_KIND_END
}
