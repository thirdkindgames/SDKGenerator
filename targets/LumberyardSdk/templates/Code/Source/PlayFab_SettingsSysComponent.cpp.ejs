
#include "StdAfx.h"

#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/Serialization/EditContext.h>

#include "PlayFab<%- gemName %>_SettingsSysComponent.h"

#include "PlayFabSettings.h"

namespace PlayFab<%- gemName %>Sdk
{
    static void ExampleGlobalErrorHandler(const PlayFabError& error, void* customData)
    {
        AZ_TracePrintf("PlayFab", "==================================================================");
        AZ_TracePrintf("PlayFab", "PlayFab Error");
        AZ_TracePrintf("PlayFab", " HTTP Status: %s", error.HttpStatus.c_str());
        AZ_TracePrintf("PlayFab", " Error: %s", error.ErrorName.c_str());
        AZ_TracePrintf("PlayFab", " Description: %s", error.ErrorMessage.c_str());

        if (!error.ErrorDetails.empty())
        {
            AZ_TracePrintf("PlayFab", " Additional Info:");
            for (auto& details : error.ErrorDetails)
            {
                AZ_TracePrintf("PlayFab", "  %s: %s", details.first.c_str(), details.second.c_str());
            }
        }
        AZ_TracePrintf("PlayFab", "==================================================================");
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::Reflect(AZ::ReflectContext* context)
    {
        if (AZ::SerializeContext* serialize = azrtti_cast<AZ::SerializeContext*>(context))
        {
            serialize->Class<PlayFab<%- gemName %>_SettingsSysComponent, AZ::Component>()
                ->Version(0)
                ->SerializerForEmptyClass();

            if (AZ::EditContext* ec = serialize->GetEditContext())
            {
                ec->Class<PlayFab<%- gemName %>_SettingsSysComponent>("PlayFab<%- gemName %>_Settings", "Provides access to the Settings API within the PlayFab <%- gemName %> SDK")
                    ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                    // ->Attribute(AZ::Edit::Attributes::Category, "") Set a category
                    ->Attribute(AZ::Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("System"))
                    ->Attribute(AZ::Edit::Attributes::AutoExpand, true)
                    ;
            }
        }
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided)
    {
        provided.push_back(AZ_CRC("PlayFab<%- gemName %>_SettingsService"));
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible)
    {
        incompatible.push_back(AZ_CRC("PlayFab<%- gemName %>_SettingsService"));
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required)
    {
        (void)required;
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::GetDependentServices(AZ::ComponentDescriptor::DependencyArrayType& dependent)
    {
        (void)dependent;
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::Init()
    {
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::Activate()
    {
        // Initialise the settings
        PlayFabSettings::playFabSettings = new PlayFabSettings();

        // Set a default error handler
        PlayFabSettings::playFabSettings->globalErrorHandler = &ExampleGlobalErrorHandler;

        PlayFab<%- gemName %>_SettingsRequestBus::Handler::BusConnect();
    }

    void PlayFab<%- gemName %>_SettingsSysComponent::Deactivate()
    {
        PlayFab<%- gemName %>_SettingsRequestBus::Handler::BusDisconnect();

        // Destroy the settings
        SAFE_DELETE(PlayFabSettings::playFabSettings);
    }

    // Read-Only Section
    AZStd::string PlayFab<%- gemName %>_SettingsSysComponent::GetBuildIdentifier()
    {
        return PlayFabSettings::playFabSettings->buildIdentifier;
    }

    // Read/Write Section
    void PlayFab<%- gemName %>_SettingsSysComponent::SetTitleId(AZStd::string newTitleId)
    {
        PlayFabSettings::playFabSettings->titleId = newTitleId;
    }

    AZStd::string PlayFab<%- gemName %>_SettingsSysComponent::GetTitleId()
    {
        return PlayFabSettings::playFabSettings->titleId;
    }
<% if (hasServerOptions) { %>
    void PlayFab<%- gemName %>_SettingsSysComponent::SetDevSecretKey(AZStd::string newSecretKey)
    {
        PlayFabSettings::playFabSettings->developerSecretKey = newSecretKey;
    }

    AZStd::string PlayFab<%- gemName %>_SettingsSysComponent::GetDevSecretKey()
    {
        return PlayFabSettings::playFabSettings->developerSecretKey;
    }
<% } %>
}
