#include "StdAfx.h"
#include "PlayFab<%- api.name %>Api.h"
#include "PlayFabSettings.h"

#include <AzCore/EBus/EBus.h>
#include "PlayFab<%- gemName %>Sdk/PlayFab<%- gemName %>_<%- api.name %>NotificationBus.h" // #THIRD_KIND_PLAYFAB_NOTIFICATION_BUS: dbowen (2017/08/11)

using namespace PlayFab<%- gemName %>Sdk;
<% if(hasClientOptions) { %>
// Client-Specific
AZStd::string PlayFabClientApi::mUserSessionTicket;

bool PlayFabClientApi::IsClientLoggedIn()
{
    return mUserSessionTicket.length() != 0;
}

// #THIRD_KIND_PLAYFAB_SHUTDOWN_FIXES: - Added a logout function so that the statics can be destroyed before the system allocator.
void PlayFabClientApi::ForgetClientCredentials()
{
    // #THIRD_KIND_PLAYFAB_CRASH_WHEN_PC_IS_OFFLINE: szaluga (2017/08/05)
    // We're taking advantage of the SSO optimization implemented by AZStd::string (and virtually all popular compilers) -
    // small strings are using an internal buffer instead of the allocator.
    // Note: This was not possible with Aws::String, as it deliberately disabled SSO to fix some Android/gcc issuses,
    // but now that PlayFab uses AZStd::string, it should be safe to rely on this behaviour.
    mUserSessionTicket.set_capacity(0);
}

void PlayFabClientApi::MultiStepClientLogin(bool needsAttribution)
{
    if (needsAttribution && !PlayFabSettings::playFabSettings->disableAdvertising && PlayFabSettings::playFabSettings->advertisingIdType.length() > 0 && PlayFabSettings::playFabSettings->advertisingIdValue.length() > 0)
    {
        ClientModels::AttributeInstallRequest request;
        if (PlayFabSettings::playFabSettings->advertisingIdType == PlayFabSettings::playFabSettings->AD_TYPE_IDFA)
            request.Idfa = PlayFabSettings::playFabSettings->advertisingIdValue;
        else if (PlayFabSettings::playFabSettings->advertisingIdType == PlayFabSettings::playFabSettings->AD_TYPE_ANDROID_ID)
            request.Adid = PlayFabSettings::playFabSettings->advertisingIdValue;
        else
            return;
        AttributeInstall(request, nullptr, nullptr);
    }
}
<% } %>

// #THIRD_KIND_PLAYFAB_NOTIFICATION_BUS_: dbowen (2017/08/11)
void PlayFab<%- api.name %>Api::OnError(const PlayFabRequest& request, const PlayFabError& error)
{
    EBUS_EVENT_ID(request.mRequestId,PlayFab<%- gemName %>_<%- api.name %>NotificationBus, OnError, error, request.mRequestId);     
    EBUS_EVENT(PlayFab<%- gemName %>_<%- api.name %>GlobalNotificationBus, OnError, error, request.mRequestId);
}
// THIRD_KIND_END

// PlayFab<%- api.name %> Api
PlayFab<%- api.name %>Api::PlayFab<%- api.name %>Api() {}
<% for(var i in api.calls) { var apiCall = api.calls[i]; %>
int PlayFab<%- api.name %>Api::<%- apiCall.name %>(
<% if(HasRequest(apiCall, api)) { %>    <%- api.name %>Models::<%- apiCall.request %>& request,<% } %>
    ProcessApiCallback<<%- api.name %>Models::<%- apiCall.result %>> callback,
    ErrorCallback errorCallback,
    void* customData
)
{
<%- GetRequestActions(apiCall, api) %>
<% if(HasRequest(apiCall, api)) {
%>    PlayFabRequest* newRequest = new PlayFabRequest(PlayFabSettings::playFabSettings->getURL("<%- apiCall.url %>"), Aws::Http::HttpMethod::HTTP_<%- apiCall.method %>, <%- GetAuthParams(apiCall) %>, request.toJSONString(), customData, callback, errorCallback, On<%- apiCall.name %>Result, OnError);
<% } else {
%>    PlayFabRequest* newRequest = new PlayFabRequest(PlayFabSettings::playFabSettings->getURL("<%- apiCall.url %>"), Aws::Http::HttpMethod::HTTP_<%- apiCall.method %>, <%- GetAuthParams(apiCall) %>, "", customData, callback, errorCallback, On<%- apiCall.name %>Result, OnError);
<% } %>    return PlayFabRequestManager::playFabHttp->AddRequest(newRequest);
}

void PlayFab<%- api.name %>Api::On<%- apiCall.name %>Result(PlayFabRequest* request)
{
    if (PlayFabBaseModel::DecodeRequest(request))
    {
        <%- api.name %>Models::<%- apiCall.result %>* outResult = new <%- api.name %>Models::<%- apiCall.result %>;
        outResult->readFromValue(request->mResponseJson->FindMember("data")->value);

<%- GetResultActions(apiCall, api) %>
        if (request->mResultCallback != nullptr)
        {
            ProcessApiCallback<<%- api.name %>Models::<%- apiCall.result %>> successCallback = reinterpret_cast<ProcessApiCallback<<%- api.name %>Models::<%- apiCall.result %>>>(request->mResultCallback);
            successCallback(*outResult, request->mCustomData);
        }

		EBUS_EVENT_ID(request->mRequestId,PlayFab<%- gemName %>_<%- api.name %>NotificationBus, On<%- apiCall.name %>, *outResult, request->mRequestId); // #THIRD_KIND_PLAYFAB_NOTIFICATION_BUS_: dbowen (2017/08/11)
        EBUS_EVENT(PlayFab<%- gemName %>_<%- api.name %>GlobalNotificationBus, On<%- apiCall.name %>, *outResult, request->mRequestId); // #THIRD_KIND_PLAYFAB_NOTIFICATION_BUS_: dbowen (2017/08/11)

        delete outResult;
        delete request;
    }
}
<% } %>
